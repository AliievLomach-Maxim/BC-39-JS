// ‍Модуль 𝟱. Заняття 𝟭𝟬. Прототипи та класи

// 𝗳𝘂𝗻𝗰𝘁𝗶𝗼𝗻 𝗔𝗻𝗶𝗺𝗮𝗹(𝗼𝗽𝘁𝗶𝗼𝗻𝘀) {
// 	// //𝘁𝗵𝗶𝘀 = {}
// 	// 𝗰𝗼𝗻𝘀𝘁 𝗼𝗯𝗷 = {}
// 	// 𝗼𝗯𝗷.𝗻𝗮𝗺𝗲 = 𝗼𝗽𝘁𝗶𝗼𝗻𝘀.𝗻𝗮𝗺𝗲
// 	// 𝗼𝗯𝗷.𝗰𝗼𝗹𝗼𝗿 = 𝗼𝗽𝘁𝗶𝗼𝗻𝘀.𝗰𝗼𝗹𝗼𝗿
// 	// 𝗿𝗲𝘁𝘂𝗿𝗻 𝗼𝗯𝗷
// 	𝘁𝗵𝗶𝘀.𝗻𝗮𝗺𝗲 = 𝗼𝗽𝘁𝗶𝗼𝗻𝘀.𝗻𝗮𝗺𝗲
// 	𝘁𝗵𝗶𝘀.𝗰𝗼𝗹𝗼𝗿 = 𝗼𝗽𝘁𝗶𝗼𝗻𝘀.𝗰𝗼𝗹𝗼𝗿
// 	// 𝘁𝗵𝗶𝘀.𝘃𝗼𝗶𝗰𝗲 = 𝗳𝘂𝗻𝗰𝘁𝗶𝗼𝗻 () {
// 	// 	𝗿𝗲𝘁𝘂𝗿𝗻 `𝗔𝗻𝗶𝗺𝗮𝗹 𝘃𝗼𝗶𝗰𝗲 𝗯𝘆 ${𝘁𝗵𝗶𝘀.𝗻𝗮𝗺𝗲}`
// 	// }
// 	// //𝗿𝗲𝘁𝘂𝗿𝗻 𝘁𝗵𝗶𝘀
// }

// 𝗰𝗹𝗮𝘀𝘀 𝗔𝗻𝗶𝗺𝗮𝗹 {
// 	𝗰𝗼𝗻𝘀𝘁𝗿𝘂𝗰𝘁𝗼𝗿(𝗼𝗽𝘁𝗶𝗼𝗻𝘀) {
// 		𝘁𝗵𝗶𝘀.𝗻𝗮𝗺𝗲 = 𝗼𝗽𝘁𝗶𝗼𝗻𝘀.𝗻𝗮𝗺𝗲
// 		𝘁𝗵𝗶𝘀.𝗰𝗼𝗹𝗼𝗿 = 𝗼𝗽𝘁𝗶𝗼𝗻𝘀.𝗰𝗼𝗹𝗼𝗿
// 		𝘁𝗵𝗶𝘀.𝘁𝘆𝗽𝗲 = '𝗔𝗻𝗶𝗺𝗮𝗹'
// 	}
//     𝗰𝗼𝗻𝘀𝘁 𝗰𝗮𝗹𝗹𝗕𝗮𝗰𝗸 = (𝗻𝗮𝗺𝗲) => {
// 	𝗰𝗼𝗻𝘀𝗼𝗹𝗲.𝗹𝗼𝗴('𝗻𝗮𝗺𝗲', 𝗻𝗮𝗺𝗲)
// }
// 	𝘃𝗼𝗶𝗰𝗲(𝗰𝗹𝗯) {
// 		𝗰𝗹𝗯(𝘁𝗵𝗶𝘀.𝗻𝗮𝗺𝗲)
// 		𝗿𝗲𝘁𝘂𝗿𝗻 `𝗔𝗻𝗶𝗺𝗮𝗹 𝘃𝗼𝗶𝗰𝗲 𝗯𝘆 ${𝘁𝗵𝗶𝘀.𝗻𝗮𝗺𝗲}`
// 	}
// }

// 𝗰𝗼𝗻𝘀𝘁 𝗱𝗼𝗴 = 𝗻𝗲𝘄 𝗔𝗻𝗶𝗺𝗮𝗹({ 𝗻𝗮𝗺𝗲: '𝗥𝗲𝘅', 𝗰𝗼𝗹𝗼𝗿: '𝘄𝗵𝗶𝘁𝗲' })
// 𝗰𝗼𝗻𝘀𝘁 𝗰𝗮𝘁 = 𝗻𝗲𝘄 𝗔𝗻𝗶𝗺𝗮𝗹({ 𝗻𝗮𝗺𝗲: '𝗠𝘂𝗿𝘇𝗶𝗸', 𝗰𝗼𝗹𝗼𝗿: '𝗯𝗹𝗮𝗰𝗸' })

// 𝗱𝗼𝗴.𝘃𝗼𝗶𝗰𝗲(𝗰𝗮𝗹𝗹𝗕𝗮𝗰𝗸)
// 𝗔𝗻𝗶𝗺𝗮𝗹.𝗽𝗿𝗼𝘁𝗼𝘁𝘆𝗽𝗲.𝘃𝗼𝗶𝗰𝗲 = 𝗳𝘂𝗻𝗰𝘁𝗶𝗼𝗻 () {
// 	𝗿𝗲𝘁𝘂𝗿𝗻 `𝗔𝗻𝗶𝗺𝗮𝗹 𝘃𝗼𝗶𝗰𝗲 𝗯𝘆 ${𝘁𝗵𝗶𝘀.𝗻𝗮𝗺𝗲}`
// }

// 𝗰𝗼𝗻𝘀𝗼𝗹𝗲.𝗹𝗼𝗴('𝗱𝗼𝗴', 𝗱𝗼𝗴)
// 𝗰𝗼𝗻𝘀𝗼𝗹𝗲.𝗹𝗼𝗴('𝗰𝗮𝘁', 𝗰𝗮𝘁)

// 𝗰𝗼𝗻𝘀𝘁 𝗦𝗧𝗔𝗧𝗨𝗦 = {
// 	𝗔𝗖𝗧𝗜𝗩𝗘: '𝗔𝗰𝘁𝗶𝘃𝗲',
// 	𝗡𝗼𝗔𝗖𝗧𝗜𝗩𝗘: '𝗡𝗼 𝗔𝗰𝘁𝗶𝘃𝗲',
// }

// 𝗰𝗹𝗮𝘀𝘀 𝗨𝘀𝗲𝗿 {
// 	𝘀𝘁𝗮𝘁𝗶𝗰 𝗦𝗧𝗔𝗧𝗨𝗦 = {
// 		𝗔𝗖𝗧𝗜𝗩𝗘: '𝗔𝗰𝘁𝗶𝘃𝗲',
// 		𝗡𝗼𝗔𝗖𝗧𝗜𝗩𝗘: '𝗡𝗼 𝗔𝗰𝘁𝗶𝘃𝗲',
// 	}

// 	#𝗻𝗮𝗺𝗲
// 	#𝗲𝗺𝗮𝗶𝗹

// 	𝗰𝗼𝗻𝘀𝘁𝗿𝘂𝗰𝘁𝗼𝗿({ 𝗻𝗮𝗺𝗲, 𝗲𝗺𝗮𝗶𝗹 }) {
// 		𝘁𝗵𝗶𝘀.#𝗻𝗮𝗺𝗲 = 𝗻𝗮𝗺𝗲
// 		𝘁𝗵𝗶𝘀.#𝗲𝗺𝗮𝗶𝗹 = 𝗲𝗺𝗮𝗶𝗹
// 		𝘁𝗵𝗶𝘀.𝗶𝘀𝗔𝗰𝘁𝗶𝘃𝗲 = 𝗨𝘀𝗲𝗿.𝗦𝗧𝗔𝗧𝗨𝗦.𝗔𝗖𝗧𝗜𝗩𝗘
// 	}

// 	𝘀𝗮𝘆𝗛𝗲𝗹𝗹𝗼() {
// 		𝗿𝗲𝘁𝘂𝗿𝗻 `${𝘁𝗵𝗶𝘀.#𝗻𝗮𝗺𝗲} 𝘀𝗮𝘆 𝗛𝗲𝗹𝗹𝗼`
// 	}

// 	𝗴𝗲𝘁 𝗲𝗺𝗮𝗶𝗹() {
// 		𝗿𝗲𝘁𝘂𝗿𝗻 𝘁𝗵𝗶𝘀.#𝗲𝗺𝗮𝗶𝗹
// 	}

// 	𝘀𝗲𝘁 𝗲𝗺𝗮𝗶𝗹(𝗻𝗲𝘄𝗘𝗺𝗮𝗶𝗹) {
// 		𝗶𝗳 (!𝗻𝗲𝘄𝗘𝗺𝗮𝗶𝗹 || 𝗻𝗲𝘄𝗘𝗺𝗮𝗶𝗹 === ' ') 𝗮𝗹𝗲𝗿𝘁(`𝗘𝗺𝗮𝗶𝗹 𝗻𝗼𝘁 𝗰𝗼𝗿𝗿𝗲𝗰𝘁!`)
// 		𝗲𝗹𝘀𝗲 𝗿𝗲𝘁𝘂𝗿𝗻 (𝘁𝗵𝗶𝘀.#𝗲𝗺𝗮𝗶𝗹 = 𝗻𝗲𝘄𝗘𝗺𝗮𝗶𝗹)
// 	}
// }

// 𝗰𝗼𝗻𝘀𝘁 𝘂𝘀𝗲𝗿 = 𝗻𝗲𝘄 𝗨𝘀𝗲𝗿({ 𝗻𝗮𝗺𝗲: '𝗔𝗹𝗲𝘅', 𝗲𝗺𝗮𝗶𝗹: '𝗾𝘄𝗲@𝗾𝘄𝗲.𝗰𝗼' })
// 𝗰𝗼𝗻𝘀𝘁 𝘂𝘀𝗲𝗿𝟮 = 𝗻𝗲𝘄 𝗨𝘀𝗲𝗿({ 𝗻𝗮𝗺𝗲: '𝗢𝗹𝗲𝗴', 𝗲𝗺𝗮𝗶𝗹: '𝗮𝘀𝗱@𝗮𝘀𝗱.𝗰𝗼𝗺' })
// 𝘂𝘀𝗲𝗿.𝗲𝗺𝗮𝗶𝗹 = ' '
// 𝗰𝗼𝗻𝘀𝗼𝗹𝗲.𝗹𝗼𝗴('𝘂𝘀𝗲𝗿', 𝘂𝘀𝗲𝗿)
// 𝗰𝗼𝗻𝘀𝗼𝗹𝗲.𝗹𝗼𝗴('𝘂𝘀𝗲𝗿', 𝘂𝘀𝗲𝗿.𝘀𝗮𝘆𝗛𝗲𝗹𝗹𝗼())
// 𝗰𝗼𝗻𝘀𝗼𝗹𝗲.𝗹𝗼𝗴('𝘂𝘀𝗲𝗿𝟮', 𝘂𝘀𝗲𝗿𝟮.𝘀𝗮𝘆𝗛𝗲𝗹𝗹𝗼())

// ‍𝗘𝘅𝗮𝗺𝗽𝗹𝗲 𝟭 - Блогер
// Напиши клас 𝗕𝗹𝗼𝗴𝗴𝗲𝗿 для створення об'єкта блогера з наступними властивостями:

// 𝗲𝗺𝗮𝗶𝗹 - пошта, рядок
// 𝗮𝗴𝗲 - вік, число
// 𝗻𝘂𝗺𝗯𝗲𝗿𝗢𝗳𝗣𝗼𝘀𝘁𝘀 - кількість постів, число
// 𝘁𝗼𝗽𝗶𝗰𝘀 - масив тем на яких спеціалізується блогер
// Клас чекає один параметр - об'єкт налаштувань з однойменними властивостями.

// Додай метод 𝗴𝗲𝘁𝗜𝗻𝗳𝗼(), який, повертає рядок: 𝗨𝘀𝗲𝗿 ${пошта} 𝗶𝘀 ${вік} 𝘆𝗲𝗮𝗿𝘀 𝗼𝗹𝗱 𝗮𝗻𝗱 𝗵𝗮𝘀 ${кількість постів} 𝗽𝗼𝘀𝘁𝘀.

// Додай метод 𝘂𝗽𝗱𝗮𝘁𝗲𝗣𝗼𝘀𝘁𝗖𝗼𝘂𝗻𝘁(𝘃𝗮𝗹𝘂𝗲), який у параметрі 𝘃𝗮𝗹𝘂𝗲 приймає кількість постів, які потрібно додати користувачеві.

// 𝗰𝗼𝗻𝘀𝘁 𝗺𝗮𝗻𝗴𝗼 = 𝗻𝗲𝘄 𝗨𝘀𝗲𝗿({
//   𝗻𝗮𝗺𝗲: '𝗺𝗮𝗻𝗴𝗼@𝗺𝗮𝗶𝗹.𝗰𝗼𝗺',
//   𝗮𝗴𝗲: 𝟮𝟰,
//   𝗻𝘂𝗺𝗯𝗲𝗿𝗢𝗳𝗣𝗼𝘀𝘁𝘀: 𝟮𝟬,
//   𝘁𝗼𝗽𝗶𝗰𝘀: ['𝘁𝗲𝗰𝗵', '𝗰𝗼𝗼𝗸𝗶𝗻𝗴'],
// });
// 𝗰𝗼𝗻𝘀𝗼𝗹𝗲.𝗹𝗼𝗴(𝗺𝗮𝗻𝗴𝗼.𝗴𝗲𝘁𝗜𝗻𝗳𝗼()); // 𝗨𝘀𝗲𝗿 𝗺𝗮𝗻𝗴𝗼@𝗺𝗮𝗶𝗹.𝗰𝗼𝗺 𝗶𝘀 𝟮𝟰 𝘆𝗲𝗮𝗿𝘀 𝗼𝗹𝗱 𝗮𝗻𝗱 𝗵𝗮𝘀 𝟮𝟬 𝗽𝗼𝘀𝘁𝘀
// 𝗺𝗮𝗻𝗴𝗼.𝘂𝗽𝗱𝗮𝘁𝗲𝗣𝗼𝘀𝘁𝗖𝗼𝘂𝗻𝘁(𝟱);
// 𝗰𝗼𝗻𝘀𝗼𝗹𝗲.𝗹𝗼𝗴(𝗺𝗮𝗻𝗴𝗼.𝗴𝗲𝘁𝗜𝗻𝗳𝗼()); // 𝗨𝘀𝗲𝗿 𝗺𝗮𝗻𝗴𝗼@𝗺𝗮𝗶𝗹.𝗰𝗼𝗺 𝗶𝘀 𝟮𝟰 𝘆𝗲𝗮𝗿𝘀 𝗼𝗹𝗱 𝗮𝗻𝗱 𝗵𝗮𝘀 𝟮𝟱 𝗽𝗼𝘀𝘁𝘀

// 𝗰𝗼𝗻𝘀𝘁 𝗽𝗼𝗹𝘆 = 𝗻𝗲𝘄 𝗨𝘀𝗲𝗿({
//   𝗻𝗮𝗺𝗲: '𝗽𝗼𝗹𝘆@𝗺𝗮𝗶𝗹.𝗰𝗼𝗺',
//   𝗮𝗴𝗲: 𝟭𝟵,
//   𝗻𝘂𝗺𝗯𝗲𝗿𝗢𝗳𝗣𝗼𝘀𝘁𝘀: 𝟭𝟳,
//   𝘁𝗼𝗽𝗶𝗰𝘀: ['𝘀𝗽𝗼𝗿𝘁𝘀', '𝗴𝗮𝗺𝗶𝗻𝗴', '𝗵𝗲𝗮𝗹𝘁𝗵'],
// });
// 𝗰𝗼𝗻𝘀𝗼𝗹𝗲.𝗹𝗼𝗴(𝗽𝗼𝗹𝘆.𝗴𝗲𝘁𝗜𝗻𝗳𝗼()); // 𝗨𝘀𝗲𝗿 𝗽𝗼𝗹𝘆@𝗺𝗮𝗶𝗹.𝗰𝗼𝗺 𝗶𝘀 𝟭𝟵 𝘆𝗲𝗮𝗿𝘀 𝗼𝗹𝗱 𝗮𝗻𝗱 𝗵𝗮𝘀 𝟭𝟳 𝗽𝗼𝘀𝘁𝘀
// 𝗽𝗼𝗹𝘆.𝘂𝗽𝗱𝗮𝘁𝗲𝗣𝗼𝘀𝘁𝗖𝗼𝘂𝗻𝘁(𝟰);
// 𝗰𝗼𝗻𝘀𝗼𝗹𝗲.𝗹𝗼𝗴(𝗽𝗼𝗹𝘆.𝗴𝗲𝘁𝗜𝗻𝗳𝗼()); // 𝗨𝘀𝗲𝗿 𝗽𝗼𝗹𝘆@𝗺𝗮𝗶𝗹.𝗰𝗼𝗺 𝗶𝘀 𝟭𝟵 𝘆𝗲𝗮𝗿𝘀 𝗼𝗹𝗱 𝗮𝗻𝗱 𝗵𝗮𝘀 𝟮𝟭 𝗽𝗼𝘀𝘁𝘀

// ‍𝗘𝘅𝗮𝗺𝗽𝗹𝗲 𝟮 - Сховище
// Напиши клас 𝗦𝘁𝗼𝗿𝗮𝗴𝗲 який створює об'єкти для керування складом товарів. При виклику отримуватиме один аргумент - початковий масив товарів і записуватиме його властивість 𝗶𝘁𝗲𝗺𝘀.

// Додай методи класу:

// 𝗴𝗲𝘁𝗜𝘁𝗲𝗺𝘀() - повертає масив товарів.
// 𝗮𝗱𝗱𝗜𝘁𝗲𝗺(𝗶𝘁𝗲𝗺) - отримує новий товар і додає його до поточних.
// 𝗿𝗲𝗺𝗼𝘃𝗲𝗜𝘁𝗲𝗺(𝗶𝘁𝗲𝗺) - отримує товар і, якщо він є, видаляє його з поточних.
// 𝗰𝗼𝗻𝘀𝘁 𝘀𝘁𝗼𝗿𝗮𝗴𝗲 = 𝗻𝗲𝘄 𝗦𝘁𝗼𝗿𝗮𝗴𝗲(['🍎', '🍋', '🍇', '🍑']);

// 𝗰𝗼𝗻𝘀𝘁 𝗶𝘁𝗲𝗺𝘀 = 𝘀𝘁𝗼𝗿𝗮𝗴𝗲.𝗴𝗲𝘁𝗜𝘁𝗲𝗺𝘀();
// 𝗰𝗼𝗻𝘀𝗼𝗹𝗲.𝘁𝗮𝗯𝗹𝗲(𝗶𝘁𝗲𝗺𝘀); // [ '🍎', '🍋', '🍇', '🍑' ]

// 𝘀𝘁𝗼𝗿𝗮𝗴𝗲.𝗮𝗱𝗱𝗜𝘁𝗲𝗺('🍌');
// 𝗰𝗼𝗻𝘀𝗼𝗹𝗲.𝘁𝗮𝗯𝗹𝗲(𝘀𝘁𝗼𝗿𝗮𝗴𝗲.𝗶𝘁𝗲𝗺𝘀); // [ '🍎', '🍋', '🍇', '🍑', '🍌' ]

// 𝘀𝘁𝗼𝗿𝗮𝗴𝗲.𝗿𝗲𝗺𝗼𝘃𝗲𝗜𝘁𝗲𝗺('🍋');
// 𝗰𝗼𝗻𝘀𝗼𝗹𝗲.𝘁𝗮𝗯𝗹𝗲(𝘀𝘁𝗼𝗿𝗮𝗴𝗲.𝗶𝘁𝗲𝗺𝘀); // [ '🍎', '🍇', '🍑', '🍌' ]

// ‍‍𝗘𝘅𝗮𝗺𝗽𝗹𝗲 𝟯 - 𝗨𝘀𝗲𝗿
// Напиши клас 𝗨𝘀𝗲𝗿 який створює об'єкт із властивостями 𝗹𝗼𝗴𝗶𝗻 та 𝗲𝗺𝗮𝗶𝗹. Оголоси приватні властивості #𝗹𝗼𝗴𝗶𝗻 та #𝗲𝗺𝗮𝗶𝗹, доступ до яких зроби через гетер та сетер 𝗹𝗼𝗴𝗶𝗻 та 𝗲𝗺𝗮𝗶𝗹.

// 𝗰𝗼𝗻𝘀𝘁 𝗺𝗮𝗻𝗴𝗼 = 𝗻𝗲𝘄 𝗨𝘀𝗲𝗿({
//   𝗹𝗼𝗴𝗶𝗻: '𝗠𝗮𝗻𝗴𝗼',
//   𝗲𝗺𝗮𝗶𝗹: '𝗺𝗮𝗻𝗴𝗼@𝗱𝗼𝗴.𝘄𝗼𝗼𝗳',
// });

// 𝗰𝗼𝗻𝘀𝗼𝗹𝗲.𝗹𝗼𝗴(𝗺𝗮𝗻𝗴𝗼.𝗹𝗼𝗴𝗶𝗻); // 𝗠𝗮𝗻𝗴𝗼
// 𝗺𝗮𝗻𝗴𝗼.𝗹𝗼𝗴𝗶𝗻 = '𝗠𝗮𝗻𝗴𝗼𝗱𝗼𝗴𝗲';
// 𝗰𝗼𝗻𝘀𝗼𝗹𝗲.𝗹𝗼𝗴(𝗺𝗮𝗻𝗴𝗼.𝗹𝗼𝗴𝗶𝗻); // 𝗠𝗮𝗻𝗴𝗼𝗱𝗼𝗴𝗲

// 𝗰𝗼𝗻𝘀𝘁 𝗽𝗼𝗹𝘆 = 𝗻𝗲𝘄 𝗨𝘀𝗲𝗿({
//   𝗹𝗼𝗴𝗶𝗻: '𝗣𝗼𝗹𝘆',
//   𝗲𝗺𝗮𝗶𝗹: '𝗽𝗼𝗹𝘆@𝗺𝗮𝗶𝗹.𝗰𝗼𝗺',
// });

// 𝗰𝗼𝗻𝘀𝗼𝗹𝗲.𝗹𝗼𝗴(𝗽𝗼𝗹𝘆.𝗹𝗼𝗴𝗶𝗻); // 𝗣𝗼𝗹𝘆
// 𝗽𝗼𝗹𝘆.𝗹𝗼𝗴𝗶𝗻 = '𝗣𝗼𝗹𝘆𝗰𝘂𝘁𝗶𝗲';
// 𝗰𝗼𝗻𝘀𝗼𝗹𝗲.𝗹𝗼𝗴(𝗽𝗼𝗹𝘆.𝗹𝗼𝗴𝗶𝗻); // 𝗣𝗼𝗹𝘆𝗰𝘂𝘁𝗶𝗲

// ‍‍‍𝗘𝘅𝗮𝗺𝗽𝗹𝗲 𝟰 - Нотатки
// Напиши клас 𝗡𝗼𝘁𝗲𝘀 який керує колекцією нотаток у властивості 𝗶𝘁𝗲𝗺𝘀. Замітка це об'єкт із властивостями 𝘁𝗲𝘅𝘁 та 𝗽𝗿𝗶𝗼𝗿𝗶𝘁𝘆. Додай класу статичну властивість 𝗣𝗿𝗶𝗼𝗿𝗶𝘁𝘆, у якому зберігатиметься об'єкт із пріоритетами.

// {
//   𝗟𝗢𝗪: '𝗹𝗼𝘄',
//   𝗡𝗢𝗥𝗠𝗔𝗟: '𝗻𝗼𝗿𝗺𝗮𝗹',
//   𝗛𝗜𝗚𝗛: '𝗵𝗶𝗴𝗵'
// }
// Додай методи 𝗮𝗱𝗱𝗡𝗼𝘁𝗲(𝗻𝗼𝘁𝗲), 𝗿𝗲𝗺𝗼𝘃𝗲𝗡𝗼𝘁𝗲(𝘁𝗲𝘅𝘁) та 𝘂𝗽𝗱𝗮𝘁𝗲𝗣𝗿𝗶𝗼𝗿𝗶𝘁𝘆(𝘁𝗲𝘅𝘁, 𝗻𝗲𝘄𝗣𝗿𝗶𝗼𝗿𝗶𝘁𝘆).

// 𝗰𝗼𝗻𝘀𝘁 𝗺𝘆𝗡𝗼𝘁𝗲𝘀 = 𝗻𝗲𝘄 𝗡𝗼𝘁𝗲𝘀([]);

// 𝗺𝘆𝗡𝗼𝘁𝗲𝘀.𝗮𝗱𝗱𝗡𝗼𝘁𝗲({ 𝘁𝗲𝘅𝘁: 'Моя перша замітка', 𝗽𝗿𝗶𝗼𝗿𝗶𝘁𝘆: 𝗡𝗼𝘁𝗲𝘀.𝗣𝗿𝗶𝗼𝗿𝗶𝘁𝘆.𝗟𝗢𝗪 });
// 𝗰𝗼𝗻𝘀𝗼𝗹𝗲.𝗹𝗼𝗴(𝗺𝘆𝗡𝗼𝘁𝗲𝘀.𝗶𝘁𝗲𝗺𝘀);

// 𝗺𝘆𝗡𝗼𝘁𝗲𝘀.𝗮𝗱𝗱𝗡𝗼𝘁𝗲({
//   𝘁𝗲𝘅𝘁: 'Моя друга замітка',
//   𝗽𝗿𝗶𝗼𝗿𝗶𝘁𝘆: 𝗡𝗼𝘁𝗲𝘀.𝗣𝗿𝗶𝗼𝗿𝗶𝘁𝘆.𝗡𝗢𝗥𝗠𝗔𝗟,
// });
// 𝗰𝗼𝗻𝘀𝗼𝗹𝗲.𝗹𝗼𝗴(𝗺𝘆𝗡𝗼𝘁𝗲𝘀.𝗶𝘁𝗲𝗺𝘀);

// 𝗺𝘆𝗡𝗼𝘁𝗲𝘀.𝗿𝗲𝗺𝗼𝘃𝗲𝗡𝗼𝘁𝗲('Моя перша замітка');
// 𝗰𝗼𝗻𝘀𝗼𝗹𝗲.𝗹𝗼𝗴(𝗺𝘆𝗡𝗼𝘁𝗲𝘀.𝗶𝘁𝗲𝗺𝘀);

// 𝗺𝘆𝗡𝗼𝘁𝗲𝘀.𝘂𝗽𝗱𝗮𝘁𝗲𝗡𝗼𝘁𝗲('Моя друга замітка', 𝗡𝗼𝘁𝗲𝘀.𝗣𝗿𝗶𝗼𝗿𝗶𝘁𝘆.𝗛𝗜𝗚𝗛);
// 𝗰𝗼𝗻𝘀𝗼𝗹𝗲.𝗹𝗼𝗴(𝗺𝘆𝗡𝗼𝘁𝗲𝘀.𝗶𝘁𝗲𝗺𝘀);

// ‍‍‍‍𝗘𝘅𝗮𝗺𝗽𝗹𝗲 𝟱 - 𝗧𝗼𝗴𝗴𝗹𝗲
// Напишіть клас 𝗧𝗼𝗴𝗴𝗹𝗲 який приймає об'єкт налаштувань {𝗶𝘀𝗢𝗽𝗲𝗻: 𝗯𝗼𝗼𝗹𝗲𝗮𝗻} і оголошує одну властивість 𝗼𝗻 - стан вкл/викл (𝘁𝗿𝘂𝗲/𝗳𝗮𝗹𝘀𝗲). За замовчуванням значення властивості 𝗼𝗻 повинно бути 𝗳𝗮𝗹𝘀𝗲.

// 𝗰𝗼𝗻𝘀𝘁 𝗳𝗶𝗿𝘀𝘁𝗧𝗼𝗴𝗴𝗹𝗲 = 𝗻𝗲𝘄 𝗧𝗼𝗴𝗴𝗹𝗲({ 𝗶𝘀𝗢𝗽𝗲𝗻: 𝘁𝗿𝘂𝗲 });
// 𝗰𝗼𝗻𝘀𝗼𝗹𝗲.𝗴𝗿𝗼𝘂𝗽('𝗳𝗶𝗿𝘀𝘁𝗧𝗼𝗴𝗴𝗹𝗲');
// 𝗰𝗼𝗻𝘀𝗼𝗹𝗲.𝗹𝗼𝗴(𝗳𝗶𝗿𝘀𝘁𝗧𝗼𝗴𝗴𝗹𝗲.𝗼𝗻);
// 𝗳𝗶𝗿𝘀𝘁𝗧𝗼𝗴𝗴𝗹𝗲.𝘁𝗼𝗴𝗴𝗹𝗲();
// 𝗰𝗼𝗻𝘀𝗼𝗹𝗲.𝗹𝗼𝗴(𝗳𝗶𝗿𝘀𝘁𝗧𝗼𝗴𝗴𝗹𝗲.𝗼𝗻);
// 𝗰𝗼𝗻𝘀𝗼𝗹𝗲.𝗴𝗿𝗼𝘂𝗽𝗘𝗻𝗱('𝗳𝗶𝗿𝘀𝘁𝗧𝗼𝗴𝗴𝗹𝗲');

// 𝗰𝗼𝗻𝘀𝘁 𝘀𝗲𝗰𝗼𝗻𝗱𝗧𝗼𝗴𝗴𝗹𝗲 = 𝗻𝗲𝘄 𝗧𝗼𝗴𝗴𝗹𝗲();
// 𝗰𝗼𝗻𝘀𝗼𝗹𝗲.𝗴𝗿𝗼𝘂𝗽('𝘀𝗲𝗰𝗼𝗻𝗱𝗧𝗼𝗴𝗴𝗹𝗲');
// 𝗰𝗼𝗻𝘀𝗼𝗹𝗲.𝗹𝗼𝗴(𝘀𝗲𝗰𝗼𝗻𝗱𝗧𝗼𝗴𝗴𝗹𝗲.𝗼𝗻);
// 𝘀𝗲𝗰𝗼𝗻𝗱𝗧𝗼𝗴𝗴𝗹𝗲.𝘁𝗼𝗴𝗴𝗹𝗲();
// 𝗰𝗼𝗻𝘀𝗼𝗹𝗲.𝗹𝗼𝗴(𝘀𝗲𝗰𝗼𝗻𝗱𝗧𝗼𝗴𝗴𝗹𝗲.𝗼𝗻);
// 𝗰𝗼𝗻𝘀𝗼𝗹𝗲.𝗴𝗿𝗼𝘂𝗽𝗘𝗻𝗱('𝘀𝗲𝗰𝗼𝗻𝗱𝗧𝗼𝗴𝗴𝗹𝗲');
